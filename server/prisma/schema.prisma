// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// EMPRESAS (Multi-Tenant)
// ============================================

model Company {
  id             String   @id @default(uuid())
  name           String
  cnpj           String   @unique
  email          String
  contactName    String
  contactPhone   String
  logoUrl        String?
  dashboardToken String   @unique
  active         Boolean  @default(true)
  enabledModules Json     @default("[]") // Array de módulos habilitados: ["MES", "QUALITY", etc.]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relações
  users                User[]
  groups               Group[]
  machines             Machine[]
  shifts               Shift[]
  stopReasons          StopReason[]
  auditLogs            AuditLog[]
  pdcaPlans            PdcaPlan[]
  files                File[]
  maintenanceEquipment MaintenanceEquipment[]
  maintenanceComponents MaintenanceComponent[]
  maintenancePlans     MaintenancePlan[]
  workOrders           WorkOrder[]
  suppliers            Supplier[]

  @@map("companies")
}

// ============================================
// TURNOS
// ============================================

model Shift {
  id          String   @id @default(uuid())
  companyId   String
  name        String   // Ex: "Turno 1", "Manhã", "Noite"
  startTime   String   // Formato: "HH:mm" (ex: "08:00")
  lunchTime   String   // Formato: "HH:mm" (ex: "01:00")
  endTime     String   // Formato: "HH:mm" (ex: "17:00")
  totalHours  String   // Calculado: endTime - startTime - lunchTime (ex: "08:00")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  groups  Group[]

  @@index([companyId])
  @@map("shifts")
}

// ============================================
// USUÁRIOS
// ============================================

enum UserRole {
  MASTER
  ADMIN
  SUPERVISOR
  OPERATOR
}

model User {
  id         String   @id @default(uuid())
  companyId  String?
  name       String
  email      String   @unique
  password   String
  role       UserRole
  active     Boolean  @default(true)
  mfaEnabled Boolean  @default(false)
  mfaSecret  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relações
  company                 Company?              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  operatorGroups          OperatorGroup[]
  auditLogs               AuditLog[]
  machineActivities       MachineActivity[]
  maintenanceEquipmentResponsible MaintenanceEquipment[] @relation("MaintenanceEquipmentResponsible")
  maintenancePlanResponsible MaintenancePlan[]
  workOrdersAssigned      WorkOrder[]          @relation("WorkOrderAssigned")
  workOrdersApproved      WorkOrder[]          @relation("WorkOrderApprover")

  @@index([companyId])
  @@index([email])
  @@map("users")
}

// ============================================
// GRUPOS/CÉLULAS
// ============================================

model Group {
  id                     String   @id @default(uuid())
  companyId              String
  name                   String
  description            String?
  shiftId                String?
  expectedCyclesPerShift Int      @default(0)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relações
  company        Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  shift          Shift?          @relation(fields: [shiftId], references: [id], onDelete: SetNull)
  machines       Machine[]
  operatorGroups OperatorGroup[]
  fileGroups     FileGroup[]

  @@index([companyId])
  @@index([shiftId])
  @@map("groups")
}

// Tabela de relação Many-to-Many entre Operadores e Grupos
model OperatorGroup {
  id        String   @id @default(uuid())
  userId    String
  groupId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
  @@map("operator_groups")
}

// ============================================
// MÁQUINAS
// ============================================

enum MachineStatus {
  IDLE
  NORMAL_RUNNING
  STOPPED
  EMERGENCY
}

model Machine {
  id                String        @id @default(uuid())
  companyId         String
  groupId           String?
  name              String
  code              String
  numberOfMatrices  Int           @default(0)
  standardCycleTime Int // Em segundos
  status            MachineStatus @default(IDLE)
  currentOperatorId String?
  active            Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relações
  company    Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  group      Group?            @relation(fields: [groupId], references: [id], onDelete: SetNull)
  matrices   Matrix[]
  activities MachineActivity[]

  @@index([companyId])
  @@index([groupId])
  @@index([status])
  @@index([active])
  @@map("machines")
}

// ============================================
// MATRIZES
// ============================================

enum MatrixStatus {
  IDLE
  RUNNING
  STOPPED
}

model Matrix {
  id           String       @id @default(uuid())
  machineId    String
  matrixNumber Int // 1, 2, 3, 4...
  status       MatrixStatus @default(IDLE)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relações
  machine    Machine          @relation(fields: [machineId], references: [id], onDelete: Cascade)
  activities MatrixActivity[]

  @@unique([machineId, matrixNumber])
  @@index([machineId])
  @@map("matrices")
}

// ============================================
// MOTIVOS DE PARADA
// ============================================

enum StopReasonCategory {
  MAINTENANCE
  MATERIAL
  QUALITY
  SETUP
  OPERATOR
  EMERGENCY
  OTHER
}

model StopReason {
  id               String             @id @default(uuid())
  companyId        String
  name             String
  category         StopReasonCategory
  description      String?
  excludeFromPareto Boolean           @default(false) // Motivos que não aparecem no Pareto
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  // Relações
  company           Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  machineActivities MachineActivity[]
  matrixActivities  MatrixActivity[]

  @@index([companyId])
  @@index([category])
  @@map("stop_reasons")
}

// ============================================
// ATIVIDADES DE MÁQUINAS (Histórico)
// ============================================

model MachineActivity {
  id           String        @id @default(uuid())
  machineId    String
  operatorId   String
  status       MachineStatus
  stopReasonId String?
  startTime    DateTime      @default(now())
  endTime      DateTime?
  duration     Int? // Em segundos (calculado quando endTime é definido)
  cyclesCount  Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relações
  machine    Machine     @relation(fields: [machineId], references: [id], onDelete: Cascade)
  operator   User        @relation(fields: [operatorId], references: [id], onDelete: Cascade)
  stopReason StopReason? @relation(fields: [stopReasonId], references: [id], onDelete: SetNull)

  @@index([machineId])
  @@index([operatorId])
  @@index([startTime])
  @@map("machine_activities")
}

// ============================================
// ATIVIDADES DE MATRIZES (Histórico)
// ============================================

model MatrixActivity {
  id           String       @id @default(uuid())
  matrixId     String
  status       MatrixStatus
  stopReasonId String?
  startTime    DateTime     @default(now())
  endTime      DateTime?
  duration     Int? // Em segundos
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relações
  matrix     Matrix      @relation(fields: [matrixId], references: [id], onDelete: Cascade)
  stopReason StopReason? @relation(fields: [stopReasonId], references: [id], onDelete: SetNull)

  @@index([matrixId])
  @@index([startTime])
  @@map("matrix_activities")
}

// ============================================
// AUDITORIA
// ============================================

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  START_MACHINE
  STOP_MACHINE
  EMERGENCY_STOP
  CYCLE_COMPLETE
}

model AuditLog {
  id         String      @id @default(uuid())
  companyId  String?
  userId     String
  action     AuditAction
  entityType String // "Machine", "User", "Company", etc.
  entityId   String?
  details    Json? // Dados adicionais em JSON
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime    @default(now())

  // Relações
  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

// ============================================
// PDCA (Plan-Do-Check-Act)
// ============================================

enum PdcaPhase {
  PLAN
  DO
  CHECK
  ACT
}

model PdcaPlan {
  id          String    @id @default(uuid())
  companyId   String
  title       String
  description String?
  phase       PdcaPhase @default(PLAN)

  // Período base
  baselineStartDate DateTime
  baselineEndDate   DateTime

  // Escopo (filtros congelados)
  scopeFilters Json // { groupId?, machineId?, operatorId? }

  // Baseline congelado
  baselineData Json // Dados de desempenho do período base

  // Metas
  targetMetrics Json? // Metas definidas para melhoria

  // Resultados
  actualResults Json? // Resultados após implementação

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  company Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  actions PdcaAction[]

  @@index([companyId])
  @@index([phase])
  @@map("pdca_plans")
}

model PdcaAction {
  id          String    @id @default(uuid())
  planId      String
  title       String
  description String?
  responsible String?
  dueDate     DateTime?
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relações
  plan PdcaPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId])
  @@map("pdca_actions")
}

// ============================================
// ARQUIVOS (Files for Operators)
// ============================================

model File {
  id          String   @id @default(uuid())
  companyId   String
  name        String
  description String?
  fileUrl     String
  fileSize    Int?
  mimeType    String   @default("application/pdf")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  company    Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  fileGroups FileGroup[]

  @@index([companyId])
  @@map("files")
}

model FileGroup {
  id        String   @id @default(uuid())
  fileId    String
  groupId   String
  createdAt DateTime @default(now())

  // Relações
  file  File  @relation(fields: [fileId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([fileId, groupId])
  @@index([fileId])
  @@index([groupId])
  @@map("file_groups")
}

// ============================================
// MÓDULO DE MANUTENÇÃO
// ============================================

// Equipamentos para Manutenção (vinculado a Machine do MES)
model MaintenanceEquipment {
  id              String   @id @default(uuid())
  companyId       String
  machineId       String?  // Vinculação opcional com Machine do MES
  code            String
  name            String
  area            String?  // Área/Linha/Setor
  line            String?
  sector          String?
  manufacturer    String?  // Fabricante
  model           String?  // Modelo
  serialNumber    String?  // Número de série
  acquisitionDate DateTime? // Data de aquisição
  mtbf            Float?   // Tempo médio entre falhas (horas)
  mttr            Float?   // Tempo médio de reparo (horas)
  responsibleId   String?  // Responsável técnico (User.id)
  status          String   @default("ACTIVE") // ACTIVE, INACTIVE
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relações
  company          Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  machine          Machine?             @relation(fields: [machineId], references: [id], onDelete: SetNull)
  responsible      User?                @relation("MaintenanceEquipmentResponsible", fields: [responsibleId], references: [id], onDelete: SetNull)
  maintenancePlans MaintenancePlan[]
  workOrders       WorkOrder[]
  components       MaintenanceComponent[]
  workOrderMaterials WorkOrderMaterial[]

  @@unique([companyId, code])
  @@index([companyId])
  @@index([machineId])
  @@index([status])
  @@map("maintenance_equipment")
}

// Componentes / Peças / Itens de manutenção
model MaintenanceComponent {
  id               String   @id @default(uuid())
  companyId        String
  equipmentId      String?  // Componente pode estar vinculado a um equipamento específico
  code             String
  description      String
  unitOfMeasure    String   // Unidade de medida
  currentStock     Float    @default(0) // Estoque atual
  minimumStock     Float    @default(0) // Estoque mínimo
  unitCost         Float    @default(0) // Custo unitário
  defaultSupplierId String? // Fornecedor padrão
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relações
  company         Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  equipment       MaintenanceEquipment? @relation(fields: [equipmentId], references: [id], onDelete: SetNull)
  defaultSupplier Supplier?          @relation(fields: [defaultSupplierId], references: [id], onDelete: SetNull)
  workOrderMaterials WorkOrderMaterial[]

  @@unique([companyId, code])
  @@index([companyId])
  @@index([equipmentId])
  @@map("maintenance_components")
}

// Planos de Manutenção
enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  PREDICTIVE
  LUBRICATION
  CALIBRATION
}

enum MaintenanceFrequencyType {
  DAYS
  HOURS
  CYCLES
  COUNTER
}

model MaintenancePlan {
  id                  String                   @id @default(uuid())
  companyId           String
  equipmentId         String
  type                MaintenanceType
  frequencyType       MaintenanceFrequencyType
  frequencyValue      Int                      // Valor da frequência (ex: 30 dias, 100 horas)
  name                String
  description         String?
  instructions        String?                  // Instruções detalhadas
  checklist           Json?                    // Checklist de execução (array de itens)
  responsibleId       String?                  // Responsável pela execução
  documents           Json?                    // URLs de documentos anexos
  active              Boolean                  @default(true)
  lastExecutionDate   DateTime?
  nextExecutionDate   DateTime?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt

  // Relações
  company    Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  equipment  MaintenanceEquipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  responsible User?      @relation("MaintenancePlanResponsible", fields: [responsibleId], references: [id], onDelete: SetNull)
  workOrders WorkOrder[]

  @@index([companyId])
  @@index([equipmentId])
  @@index([type])
  @@index([active])
  @@index([nextExecutionDate])
  @@map("maintenance_plans")
}

// Ordens de Serviço (OS)
enum WorkOrderType {
  CORRECTIVE
  PREVENTIVE
  EMERGENCY
  INSPECTION
}

enum WorkOrderStatus {
  OPEN
  IN_PROGRESS
  FINISHED
  CANCELLED
  APPROVED
  PENDING_APPROVAL
}

model WorkOrder {
  id                String           @id @default(uuid())
  companyId         String
  equipmentId       String
  maintenancePlanId String?          // Se foi gerada de um plano
  workOrderNumber   String           // Número da OS
  type              WorkOrderType
  status            WorkOrderStatus  @default(OPEN)
  openedDate        DateTime         @default(now())
  closedDate        DateTime?
  failureCause      String?          // Causa da falha
  intervention      String?          // Descrição da intervenção
  executionTime     Int?             // Tempo de execução em minutos
  downtime          Int?             // Tempo de parada em minutos
  laborCost         Float            @default(0) // Custo de mão de obra
  materialsCost     Float            @default(0) // Custo de peças
  totalCost         Float            @default(0) // Custo total
  assignedToId      String?          // Técnico responsável
  approvedById      String?          // Aprovador
  approvalDate      DateTime?
  checklist         Json?            // Checklist de execução
  signature         String?          // Assinatura do executor (base64)
  notes             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relações
  company         Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  equipment       MaintenanceEquipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  maintenancePlan MaintenancePlan?     @relation(fields: [maintenancePlanId], references: [id], onDelete: SetNull)
  assignedTo      User?                @relation("WorkOrderAssigned", fields: [assignedToId], references: [id], onDelete: SetNull)
  approvedBy      User?                @relation("WorkOrderApprover", fields: [approvedById], references: [id], onDelete: SetNull)
  materials       WorkOrderMaterial[]

  @@unique([companyId, workOrderNumber])
  @@index([companyId])
  @@index([equipmentId])
  @@index([status])
  @@index([type])
  @@index([openedDate])
  @@map("work_orders")
}

// Materiais utilizados na OS
model WorkOrderMaterial {
  id             String   @id @default(uuid())
  workOrderId    String
  componentId    String
  equipmentId    String?  // Equipamento de onde foi retirado (para baixa de estoque)
  quantity       Float
  unitCost       Float
  totalCost      Float
  createdAt      DateTime @default(now())

  // Relações
  workOrder WorkOrder             @relation(fields: [workOrderId], references: [id], onDelete: Cascade)
  component MaintenanceComponent  @relation(fields: [componentId], references: [id], onDelete: Cascade)
  equipment MaintenanceEquipment? @relation(fields: [equipmentId], references: [id], onDelete: SetNull)

  @@index([workOrderId])
  @@index([componentId])
  @@map("work_order_materials")
}

// Fornecedores
model Supplier {
  id              String   @id @default(uuid())
  companyId       String
  corporateName   String   // Razão social
  tradeName       String?  // Nome fantasia
  cnpj            String?
  email           String?
  phone           String?
  contactPerson   String?
  serviceTypes    Json?    // Tipos de serviço prestado (array)
  sla             Int?     // SLA de atendimento (horas)
  address         String?
  notes           String?
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relações
  company         Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)
  components      MaintenanceComponent[]

  @@index([companyId])
  @@index([active])
  @@map("suppliers")
}
